{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyACYiTseI4sGGmOo4hmENrcPGTtUOPj1qM\",\n  authDomain: \"pulsar-fb2aa.firebaseapp.com\",\n  databaseURL: \"https://pulsar-fb2aa.firebaseio.com\",\n  projectId: \"pulsar-fb2aa\",\n  storageBucket: \"pulsar-fb2aa.appspot.com\",\n  messagingSenderId: \"366397027551\",\n  appId: \"1:366397027551:web:db0ddcd5116e44f510a56a\",\n  measurementId: \"G-X5K9M0Z0JY\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); //get current user session info\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //adding data to the firestore\n\nexport const addCollectionAndDocuments = async (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; //collection function for snapshot. Turning arrays to object\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); //setting the key to our object and turning it into an object data. Data normalization\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const createUserProfileDocument = async (userAuth, otherData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...otherData\n      });\n    } catch (error) {\n      console.log(\"create user profile document: \", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);","map":{"version":3,"sources":["C:/users/vv/Desktop/digitalcraft/pulsar-store/client/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","userAuth","firestore","addCollectionAndDocuments","collectionKey","objectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","doc","set","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","createUserProfileDocument","otherData","userRef","uid","snapShot","get","exists","displayName","email","createdAt","Date","error","console","log","message","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyACYiTseI4sGGmOo4hmENrcPGTtUOPj1qM\",\r\n  authDomain: \"pulsar-fb2aa.firebaseapp.com\",\r\n  databaseURL: \"https://pulsar-fb2aa.firebaseio.com\",\r\n  projectId: \"pulsar-fb2aa\",\r\n  storageBucket: \"pulsar-fb2aa.appspot.com\",\r\n  messagingSenderId: \"366397027551\",\r\n  appId: \"1:366397027551:web:db0ddcd5116e44f510a56a\",\r\n  measurementId: \"G-X5K9M0Z0JY\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n//get current user session info\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n//adding data to the firestore\r\nexport const addCollectionAndDocuments = async (collectionKey, objectToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\n  objectToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\n//collection function for snapshot. Turning arrays to object\r\n\r\nexport const convertCollectionsSnapshotToMap = collections => {\r\n  const transformedCollection = collections.docs.map(doc => {\r\n    const { title, items } = doc.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    };\r\n  });\r\n  //setting the key to our object and turning it into an object data. Data normalization\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, otherData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...otherData\r\n      });\r\n    } catch (error) {\r\n      console.log(\"create user profile document: \", error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({\r\n  prompt: \"select_account\"\r\n});\r\n\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n"]},"metadata":{},"sourceType":"module"}